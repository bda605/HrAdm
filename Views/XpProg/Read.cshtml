@inject IHtmlLocalizer<HrAdm.R0> R0
@inject IViewLocalizer R

<script src="~/js/view/XpProg.js"></script>
<script type="text/javascript">
    $(function () {
        _me.init();
    });
</script>

@await Component.InvokeAsync("XgProgPath", new { names = new string[] { R0["MenuXpProg"].Value } })
<div class="xp-prog">
    <div id="divRead">
        <form id='formRead' class='xg-form'>
            <div class="row">
                @await Component.InvokeAsync("XiText", new { title = R["ProgCode"].Value, fid = "Code", maxLen = 30, inRow = true })
                @await Component.InvokeAsync("XgFindTbar", new { })
            </div>
            @await Component.InvokeAsync("XiText", new { title = R["ProgName"].Value, fid = "Name", maxLen = 30 })
        </form>

        <div class='xg-btns-box'>
            @await Component.InvokeAsync("XgCreate")
        </div>
        <table id="tableRead" class="table table-bordered xg-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@R["ProgCode"]</th>
                    <th>@R["ProgName"]</th>
                    <th>Url</th>
                    <th width="80px">@R0["Sort"]</th>
                    <th width="100px">@R0["Crud"]</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="xg-hide">
        <form id='eform' class='xg-form'>
            @await Component.InvokeAsync("XiHide", new { fid = "Id" })
            @await Component.InvokeAsync("XiText", new { title = R["ProgCode"].Value, fid = "Code", maxLen = 30, required = true })
            @await Component.InvokeAsync("XiText", new { title = R["ProgName"].Value, fid = "Name", maxLen = 30, required = true })
            @*await Component.InvokeAsync("XiText", new { title = "Icon", fid = "Icon", maxLen = 20 })*@
            @await Component.InvokeAsync("XiText", new { title = "Url", fid = "Url", maxLen = 100, required = true })
            @await Component.InvokeAsync("XiNum", new { title = R0["Sort"].Value, fid = "Sort", required = true, cols = "2,1" })

            <div class="row">
                <div class="col-md-2 xg-label">@R["CrudFun"]</div>
                <div class="col-md-9 xg-input" style="padding-top:5px;">
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunCreate", value = "9", label = R0["Create"].Value })
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunRead", value = "9", label = R0["Read"].Value })
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunUpdate", value = "9", label = R0["Update"].Value })
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunDelete", value = "9", label = R0["Delete"].Value })
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunPrint", value = "9", label = R0["Print"].Value })
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunExport", value = "9", label = R0["Export"].Value })
                    @await Component.InvokeAsync("XiCheck", new { fid = "FunView", value = "9", label = R0["View"].Value })
                </div>
            </div>

        </form>

        <div class='xg-btns-box xg-mt5'>
            <span class="xg-block-label">@R["RoleProg"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mRoleProg.onAddRow()")
        </div>
        <form id='eformRoleProg' class='xg-form' style="border:none;">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new { title = R["Role"].Value, required = true })
                        <th>@R0["Create"]</th>
                        <th>@R0["Read"]</th>
                        <th>@R0["Update"]</th>
                        <th>@R0["Delete"]</th>
                        <th>@R0["Print"]</th>
                        <th>@R0["Export"]</th>
                        <th>@R0["View"]</th>
                        <th>@R0["Crud"]</th>
                    </tr>
                </thead>
                <tbody id="tbodyRoleProg"></tbody>
            </table>
        </form>
        @await Component.InvokeAsync("XgSaveBack")        
    </div>
</div>

<script id="tplRoleProg" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "ProgId" })
        <td>@await Component.InvokeAsync("XiSelect", new { fid = "RoleId", rows = (List<IdStrDto>)ViewBag.Roles, required = true })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunCreate", value = "9" })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunRead", value = "9" })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunUpdate", value = "9" })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunDelete", value = "9" })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunPrint", value = "9" })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunExport", value = "9" })</td>
        <td class="xg-center">@await Component.InvokeAsync("XiCheck", new { fid = "FunView", value = "9" })</td>

        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mRoleProg.onDeleteRow(this)")</td>
    </tr>
</script>