@inject IHtmlLocalizer<HrAdm.R0> R0
@inject IViewLocalizer R

<script type="text/javascript">
    $(function () {
        _me.init();
    });

    var _me = {
        init: function () {
            //datatable config
            var config = {
                columns: [
                    { data: 'UserName' },
                    //{ data: 'AgentName' },
                    { data: 'LeaveName' },
                    { data: 'StartTime' },
                    { data: 'EndTime' },
                    { data: 'Hours' },
                    { data: 'NodeName' },
                    { data: 'Created' },
                    { data: '_Fun' },
                ],
                columnDefs: [
				    { targets: [2], render: function (data, type, full, meta) {
                        return _date.jsToUiDt2(data);
                    }},
				    { targets: [3], render: function (data, type, full, meta) {
                        return _date.jsToUiDt2(data);
                    }},
				    { targets: [6], render: function (data, type, full, meta) {
                        return _date.jsToUiDt(data);
                    }},
				    { targets: [7], render: function (data, type, full, meta) {
                        return _str.format('<button type="button" class="btn btn-outline-secondary btn-sm" onclick="_crud.onUpdate(\'{0}\')">@R["Audit"]</button>', full.Id);
                    }},
                ],
            };

            //initial
            _crud.init(config, null, '@R["Audit"]');
            _me.eform = $('#eform');
        },

        //TODO: add your code
        //onclick viewFile, called by XiFile component
        onViewFile: function (fid, elm) {
            _edit.viewImage('', fid, elm, _itext.get('LeaveId', _me.eform));
        },

        onSubmit: function () {
            var form = _me.eform;
            var data = {
                id: _itext.get('SignId', form),
                status: _iselect.get('SignStatus', form),
                note: _itext.get('Note', form),
            };
            _ajax.getJson('SignRow', data, function (data) {
                _crud.afterSave(data);
            });
        },

    }; //class
</script>

@await Component.InvokeAsync("XgProgPath", new { names = new string[] { R0["MenuLeaveSign"].Value } })
<div class="xp-prog">
    <div id="divRead">
        <table id="tableRead" class="table table-bordered xg-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@R["Asker"]</th>
                    <th>@R["LeaveType"]</th>
                    <th>@R["StartTime"]</th>
                    <th>@R["EndTime"]</th>
                    <th>@R["Hours"]</th>
                    <th>@R["NodeName"]</th>
                    <th>@R0["Created"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="xg-hide">
        <form id='eform' class='xg-form'>
            @await Component.InvokeAsync("XiHide", new { fid = "SignId" })
            @await Component.InvokeAsync("XiHide", new { fid = "LeaveId" })
            @await Component.InvokeAsync("XiRead", new { title = R["Asker"].Value, fid = "UserName" })
            @await Component.InvokeAsync("XiRead", new { title = R["Agent"].Value, fid = "AgentName" })
            @await Component.InvokeAsync("XiRead", new { title = R["LeaveType"].Value, fid = "LeaveName" })
            @await Component.InvokeAsync("XiRead", new { title = R["StartTime"].Value, fid = "StartTime", format = BrFormatEstr.Dt2 })
            @await Component.InvokeAsync("XiRead", new { title = R["EndTime"].Value, fid = "EndTime", format = BrFormatEstr.Dt2 })
            @await Component.InvokeAsync("XiRead", new { title = R["Hours"].Value, fid = "Hours" })
            @await Component.InvokeAsync("XiLinkFile", new { title = R0["UpdFile"].Value, fid = "FileName" })
            @await Component.InvokeAsync("XiRead", new { title = R0["Created"].Value, fid = "Created", format = BrFormatEstr.Dt })
            @await Component.InvokeAsync("XiSelect", new { title = R["SignStatus"].Value, fid = "SignStatus", required = true, rows = (List<IdStrDto>)ViewBag.SignStatuses2 })
            @await Component.InvokeAsync("XiText", new { title = R["Note"].Value, fid = "Note", maxLen = 100, cols = "2,8" })
        </form>

        <div class='xg-center' style="margin-top:10px">
            <button type='button' class='btn xg-btn-size btn-success' onclick='_me.onSubmit()'>@R0["Submit"]</button>
            <button type='button' class='btn xg-btn-size btn-primary' onclick='_crud.onToRead()'>@R0["ToRead"]<i class='ico-back'></i></button>
        </div>
    </div>
</div>