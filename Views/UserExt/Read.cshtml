@inject IHtmlLocalizer<HrAdm.R0> R0
@inject IViewLocalizer R

<script type="text/javascript">
    $(function () {
        _me.init();
    });

    var _me = {
        init: function () {
            //datatable config
            var config = {
                columns: [
                    { data: 'Account' },
                    { data: 'Name' },
                    { data: 'DeptName' },
                    { data: 'Status' },
                    { data: '_F1' },
                    { data: '_F2' },
                ],
                columnDefs: [
                    { targets: [3], render: function (data, type, full, meta) {
                         return _crud.dtStatusName(data);
                    }},
                    { targets: [4], render: function (data, type, full, meta) {
                        var html = '<a href="javascript:_me.onGenWord(\'{0}\')">{1}</a>';
                        return _str.format(html, full.Id, '@R["GenResume"]');
                    }},
                    { targets: [5], render: function (data, type, full, meta) {
                        return _crud.dtCrudFun(full.Id, full.Name, true, false, true);
                    }},
                ],
            };

            //initial
            _me.mUserJob = new EditMany('Id', 'eformUserJob', 'tplUserJob', 'tr');
            _me.mUserSchool = new EditMany('Id', 'eformUserSchool', 'tplUserSchool', 'tr');
            _me.mUserLang = new EditMany('Id', 'eformUserLang', 'tplUserLang', 'tr', 'Sort');
            _me.mUserLicense = new EditMany('Id', 'eformUserLicense', 'tplUserLicense', 'tr');
            _me.mUserSkill = new EditMany('Id', 'eformUserSkill', 'tplUserSkill', 'tr', 'Sort');
            _crud.init(config, [null, _me.mUserJob, _me.mUserSchool, _me.mUserLang, _me.mUserLicense, _me.mUserSkill]);
        },

        //onclick viewFile, called by XiFile component
        onViewFile: function (fid, elm) {
            if (fid == 'PhotoFile')
                _me.edit0.onViewImage('', fid, elm);
            else if (fid == 'FileName')
                _me.mUserLicense.onViewImage('', fid, elm);
        },

        //generate docx file
        onGenWord: function (id) {
            _tool.ans('@R["SureGenResume"]', function () {
                window.location = 'GenWord?id=' + id;
            });
        },

    }; //class
</script>

@await Component.InvokeAsync("XgProgPath", new { names = new string[] { R0["MenuUserExt"].Value } })
<div class="xp-prog">
    <div id="divRead">
        <form id='formRead' class='xg-form'>
            <div class="row">
                @await Component.InvokeAsync("XiText", new { title = R["Account"].Value, fid = "Account", maxLen = 20, inRow = true })
                @await Component.InvokeAsync("XgFindTbar", new { hasReset = true })
            </div>
            @await Component.InvokeAsync("XiText", new { title = R["UserName"].Value, fid = "Name", maxLen = 20 })
            @await Component.InvokeAsync("XiSelect", new { title = R["Dept"].Value, fid = "DeptId", rows = (List<IdStrDto>)ViewBag.Depts })
        </form>

        <div class='xg-btns-box'>
        </div>
        <table id="tableRead" class="table table-bordered xg-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@R["Account"]</th>
                    <th>@R["UserName"]</th>
                    <th>@R["Dept"]</th>
                    <th>@R0["Status"]</th>
                    <th>@R0["Fun"]</th>
                    <th width='80px'>@R0["Crud"]</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="xg-hide">
        <form id='eform' class='xg-form'>
            @await Component.InvokeAsync("XiHide", new { fid = "Id" })
            @await Component.InvokeAsync("XiText", new { title = R["Account"].Value, fid = "Account", maxLen = 20 })
            @await Component.InvokeAsync("XiText", new { title = R["UserName"].Value, fid = "Name", maxLen = 20 })
            @await Component.InvokeAsync("XiText", new { title = R["Dept"].Value, fid = "DeptId", maxLen = 10 })
            @await Component.InvokeAsync("XiFile", new { title = R0["UpdImage"].Value, fid = "PhotoFile", labelTip = R["TipUpdImage"].Value })
            @await Component.InvokeAsync("XiCheck", new { title = R0["Status"].Value, fid = "Status" })
        </form>

        <div class='xg-btns-box'>
            <span class="xg-block-label">@R["JobExpr"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mUserJob.onAddRow()")
        </div>
        <form id='eformUserJob' class='xg-form' style="border:none">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new { title = R["JobName"].Value, required = true })
                        <th>@R["JobType"]</th>
                        <th>@R["JobPlace"]</th>
                        @await Component.InvokeAsync("XgTh", new { title = R["StartEnd"].Value, required = true })
                        @await Component.InvokeAsync("XgTh", new { title = R["CorpName"].Value, required = true })
                        <th>@R["Corpation"]</th>
                        <th>@R["IsManaged"]</th>
                        <th>@R["JobNote"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tbodyUserJob"></tbody>
            </table>
        </form>

        <div class='xg-btns-box'>
            <span class="xg-block-label">@R["SchoolData"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mUserSchool.onAddRow()")
        </div>
        <form id='eformUserSchool' class='xg-form' style="border:none">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new { title = R["SchoolName"].Value, required = true })
                        @await Component.InvokeAsync("XgTh", new { title = R["SchoolDept"].Value, required = true })
                        <th>@R["EducType"]</th>
                        @await Component.InvokeAsync("XgTh", new { title = R["StartEnd"].Value, required = true })
                        <th>@R["IsGrad"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tbodyUserSchool"></tbody>
            </table>
        </form>

        <div class='xg-btns-box'>
            <span class="xg-block-label">@R["LangAbility"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mUserLang.onAddRow()")
        </div>
        <form id='eformUserLang' class='xg-form' style="border:none">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new { title = R["LangName"].Value, required = true })
                        <th>@R["Listen"]</th>
                        <th>@R["Speak"]</th>
                        <th>@R["ReadAbility"]</th>
                        <th>@R["Write"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tbodyUserLang"></tbody>
            </table>
        </form>

        <div class='xg-btns-box'>
            <span class="xg-block-label">@R["License"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mUserLicense.onAddRow()")
        </div>
        <form id='eformUserLicense' class='xg-form' style="border:none">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new { title = R["LicName"].Value, required = true })
                        @await Component.InvokeAsync("XgTh", new { title = R["StartEnd"].Value, required = true })
                        <th>@R0["UpdFileName"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tbodyUserLicense"></tbody>
            </table>
        </form>

        <div class='xg-btns-box'>
            <span class="xg-block-label">@R["Skill"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mUserSkill.onAddRow()")
        </div>
        <form id='eformUserSkill' class='xg-form' style="border:none">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new { title = R["SkillName"].Value, required = true })
                        <th>@R["SkillNote"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="tbodyUserSkill"></tbody>
            </table>
        </form>
        @await Component.InvokeAsync("XgSaveBack")
    </div>
</div>

<script id="tplUserJob" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "UserId" })
        @await Component.InvokeAsync("XiHide", new { fid = "JobDesc" })
        <td>@await Component.InvokeAsync("XiText", new { fid = "JobName", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "JobType", maxLen = 30 })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "JobPlace", maxLen = 30 })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "StartEnd", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "CorpName", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiNum", new { fid = "CorpUsers" })</td>
        <td class='text-center'>@await Component.InvokeAsync("XiCheck", new { fid = "IsManaged" })</td>
        <td width='85px' class='text-center'>@await Component.InvokeAsync("XgOpenModal", new { title = R["JobNote"].Value, fid = "JobDesc", maxLen = -1 })</td>
        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mUserJob.onDeleteRow(this)")</td>
    </tr>
</script>

<script id="tplUserSchool" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "UserId" })
        <td>@await Component.InvokeAsync("XiText", new { fid = "SchoolName", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "SchoolDept", maxLen = 20, required = true })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "SchoolType", maxLen = 20 })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "StartEnd", maxLen = 30, required = true })</td>
        <td class='text-center'>@await Component.InvokeAsync("XiCheck", new { fid = "Graduated" })</td>
        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mUserSchool.onDeleteRow(this)")</td>
    </tr>
</script>

<script id="tplUserLang" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "UserId" })
        @await Component.InvokeAsync("XiHide", new { fid = "Sort" })
        <td>@await Component.InvokeAsync("XiText", new { fid = "LangName", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiSelect", new { fid = "ListenLevel", rows = (List<IdStrDto>)ViewBag.LangLevels })</td>
        <td>@await Component.InvokeAsync("XiSelect", new { fid = "SpeakLevel", rows = (List<IdStrDto>)ViewBag.LangLevels })</td>
        <td>@await Component.InvokeAsync("XiSelect", new { fid = "ReadLevel", rows = (List<IdStrDto>)ViewBag.LangLevels })</td>
        <td>@await Component.InvokeAsync("XiSelect", new { fid = "WriteLevel", rows = (List<IdStrDto>)ViewBag.LangLevels })</td>
        <td width='100px' class='text-center'>@await Component.InvokeAsync("XgDeleteUpDown", new { mName = "_me.mUserLang" })</td>
    </tr>
</script>

<script id="tplUserLicense" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "UserId" })
        <td>@await Component.InvokeAsync("XiText", new { fid = "LicenseName", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiText", new { fid = "StartEnd", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiFile", new { fid = "FileName" })</td>
        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mUserLicense.onDeleteRow(this)")</td>
    </tr>
</script>

<script id="tplUserSkill" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new { fid = "Id" })
        @await Component.InvokeAsync("XiHide", new { fid = "UserId" })
        @await Component.InvokeAsync("XiHide", new { fid = "Sort" })
        <td>@await Component.InvokeAsync("XiText", new { fid = "SkillName", maxLen = 30, required = true })</td>
        <td>@await Component.InvokeAsync("XiTextArea", new { fid = "SkillDesc", maxLen = 500 })</td>
        <td width='100px' class='text-center'>@await Component.InvokeAsync("XgDeleteUpDown", new { mName = "_me.mUserSkill" })</td>
    </tr>
</script>