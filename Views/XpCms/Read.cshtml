@model CmsEditDto
@inject IHtmlLocalizer<HrAdm.R0> R0
@inject IViewLocalizer R
@{
    var cols = "2,9";
    var cmsType = ViewBag.CmsType;
    var progName = (cmsType == CmsTypeEstr.Msg) ? R0["MenuCmsMsg"].Value
        : "??";
}

<script src="~/js/view/XpCms.js"></script>
<script type="text/javascript">
    $(function () {
        _me.init();
    });
</script>

@await Component.InvokeAsync("XgProgPath", new { names = new string[] { progName } })
<div class="xp-prog">
    <div id="divRead">
        <form id='formRead' class='xg-form'>
            <div class="row">
                @await Component.InvokeAsync("XiText", new { title = Model.Title, fid = "Title", inRow = true })
                @await Component.InvokeAsync("XgFindTbar")
            </div>
        </form>

        <div class='xg-btns-box'>
            @await Component.InvokeAsync("XgCreate")
        </div>
        <table id="tableRead" class="table table-bordered xg-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@Model.Title</th>
                    <th>@Model.StartTime</th>
                    <th>@Model.EndTime</th>
                    <th>@R0["Status"]</th>
                    <th>@R0["Created"]</th>
                    <th>@R0["Crud"]</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="xg-hide">
        <form id='eform' class='xg-form'>
            @await Component.InvokeAsync("XiHide", new { fid = "Id" })

            @if (Model.Title != null)
            {
                @await Component.InvokeAsync("XiText", new { title = Model.Title, fid = "Title", maxLen = 255, required = true, cols = cols })
            }
            @if (Model.Text != null)
            {
                @await Component.InvokeAsync("XiTextArea", new { title = Model.Text, fid = "Text", required = true, cols = cols })
            }
            @if (Model.Html != null)
            {
                @await Component.InvokeAsync("XiHtml", new { title = Model.Html, fid = "Html", required = true, cols = cols })
            }
            @if (Model.Note != null)
            {
                @await Component.InvokeAsync("XiTextArea", new { title = Model.Note, fid = "Note", cols = cols })
            }
            @if (Model.FileName != null)
            {
                @await Component.InvokeAsync("XiFile", new { title = Model.FileName, fid = "FileName", required = true })
            }
            @if (Model.StartTime != null)
            {
                @await Component.InvokeAsync("XiDt", new { title = Model.StartTime, fid = "StartTime", required = true, cols = cols })
            }
            @if (Model.EndTime != null)
            {
                @await Component.InvokeAsync("XiDt", new { title = Model.EndTime, fid = "EndTime", required = true, cols = cols })
            }

            @await Component.InvokeAsync("XiCheck", new { title = R0["Status"].Value, fid = "Status", label = R0["Active"].Value })
            <div class="row">
                @await Component.InvokeAsync("XiRead", new { title = R0["Creator"].Value, fid = "CreatorName", inRow = true, cols = "2,3" })
                @await Component.InvokeAsync("XiRead", new { title = R0["Reviser"].Value, fid = "ReviserName", inRow = true, cols = "2,3" })
            </div>
            <div class="row">
                @await Component.InvokeAsync("XiRead", new { title = R0["Created"].Value, fid = "Created", format = BrFormatEstr.Dt, inRow = true, cols = "2,3" })
                @await Component.InvokeAsync("XiRead", new { title = R0["Revised"].Value, fid = "Revised", format = BrFormatEstr.Dt, inRow = true, cols = "2,3" })
            </div>
        </form>

        @await Component.InvokeAsync("XgSaveBack")
    </div>
</div>
