@inject IHtmlLocalizer<HrAdm.R0> R0
@inject IViewLocalizer R
@{
    var isAuthRow = _Fun.IsAuthRow();
    var authRanges = (List<IdStrDto>)ViewBag.AuthRanges;
}

<script src="~/js/view/XpRole.js"></script>
<script type="text/javascript">
    $(function () {
        _me.init();
    });
</script>

@await Component.InvokeAsync("XgProgPath", new { names = new string[] { R0["MenuXpRole"].Value } })
<div class="xp-prog">
    <div id="divRead">
        <form id='formRead' class='xg-form'>
            <div class="row">
                @await Component.InvokeAsync("XiText", new XiTextDto { Title = R["RoleName"].Value, Fid = "Name", MaxLen = 30, InRow = true })
                @await Component.InvokeAsync("XgFindTbar", new { hasReset = true })
            </div>
        </form>

        <div class='xg-btns-box'>
            @await Component.InvokeAsync("XgCreate")
        </div>
        <table id="tableRead" class="table table-bordered xg-table" cellspacing="0">
            <thead>
                <tr>
                    <th>@R["RoleName"]</th>
                    <th>@R0["Crud"]</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="divEdit" class="xg-hide">
        <form id='eform' class='xg-form'>
            @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
            @await Component.InvokeAsync("XiText", new XiTextDto { Title = R["RoleName"].Value, Fid = "Name", MaxLen = 30, Required = true })
        </form>

        <form class='xg-form'>
            <div class='row'>
                <div class='col-md-2 xg-label'>@R["UserList"]</div>
                <div class='col-md-8 xg-input'>
                    <!-- table for control rows column has same width -->
                    <table width="100%" border="0" cellspacing="0" cellpadding="0">
                        <tbody>
                            <tr>
                                <td id="divUsers">
                                    @foreach (var row in (List<IdStrDto>)ViewBag.Users)
                                    {
                                        @await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = row.Id, Value = row.Id, Label = row.Str })
                                    }
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </form>

        <div class='xg-btns-box'>
            <span class="xg-block-label">@R["RoleProg"]</span>
            @await Component.InvokeAsync("XgAddRow", "_me.mRoleProg.onAddRow()")
        </div>
        <form id='eformRoleProg' class='xg-form' style="border:none;">
            <table class="table table-bordered xg-table xg-no-hline" cellspacing="0">
                <thead>
                    <tr>
                        @await Component.InvokeAsync("XgTh", new XgThDto { Title = R["Prog"].Value, Required = true })
                        <th>@R0["Create"]</th>
                        <th>@R0["Read"]</th>
                        <th>@R0["Update"]</th>
                        <th>@R0["Delete"]</th>
                        <th>@R0["Print"]</th>
                        <th>@R0["Export"]</th>
                        <th>@R0["View"]</th>
                        <th>@R0["Crud"]</th>
                    </tr>
                </thead>
                <tbody id="tbodyRoleProg"></tbody>
            </table>
        </form>
        @await Component.InvokeAsync("XgSaveBack")
    </div>
</div>

<script id="tplRoleProg" type="text/template">
    <tr>
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "Id" })
        @await Component.InvokeAsync("XiHide", new XiHideDto { Fid = "RoleId" })
        <td>@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "ProgId", Rows = (List<IdStrDto>)ViewBag.Progs, Required = true })</td>

        @if (isAuthRow)
        {
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunRead", Rows = authRanges })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunUpdate", Rows = authRanges })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunDelete", Rows = authRanges })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunPrint", Rows = authRanges })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunExport", Rows = authRanges })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiSelect", new XiSelectDto { Fid = "FunView", Rows = authRanges })</td>
        }
        else
        {
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunCreate" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunRead" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunUpdate" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunDelete" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunPrint" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunExport" })</td>
            <td class="xg-center">@await Component.InvokeAsync("XiCheck", new XiCheckDto { Fid = "FunView" })</td>
        }

        <td width='60px' class='text-center'>@await Component.InvokeAsync("XgDeleteRow", "_me.mRoleProg.onDeleteRow(this)")</td>
    </tr>
</script>